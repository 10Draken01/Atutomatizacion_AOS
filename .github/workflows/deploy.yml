name: CI/CD Pipeline - Deploy to AWS

# =============================================
# TRIGGERS CORREGIDOS
# =============================================
on:
  push:
    branches: [ develop ]    # ← AGREGADO: Para deploy completo
  pull_request:
    branches: [ develop ]    # ← Para validación únicamente

# =============================================
# Variables globales
# =============================================
env:
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/api-hello-world
  NODE_VERSION: '18'

jobs:
  # =============================================
  # JOB 1: Build & Test
  # =============================================
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔨 Build TypeScript
      run: npm run build
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔨 Build Docker image (SOLO API)
      run: |
        docker build -t ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} .
        docker tag ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} ${{ env.DOCKER_IMAGE_NAME }}:latest
        
    - name: 💾 Save Docker image
      run: |
        docker save ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} ${{ env.DOCKER_IMAGE_NAME }}:latest > api-image.tar
        
    - name: 📤 Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: api-image.tar

  # =============================================
  # JOB 2: Push to Docker Hub
  # =============================================
  push-to-registry:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: 📥 Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        
    - name: 🔄 Load Docker image
      run: docker load < api-image.tar
      
    - name: 🔐 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 📤 Push to Docker Hub
      run: |
        docker push ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.DOCKER_IMAGE_NAME }}:latest

  # =============================================
  # JOB 3: Deploy to EC2
  # =============================================
  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: push-to-registry
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "🔄 Starting deployment..."
          
          # Crear directorio del proyecto si no existe
          mkdir -p ~/api-core-app
          cd ~/api-core-app
          
          # Parar contenedores existentes
          docker-compose down || true
          
          # Limpiar imágenes antiguas
          docker image prune -f
          
          # Pull nueva imagen de API
          docker pull ${{ env.DOCKER_IMAGE_NAME }}:latest
          
          # Crear archivo .env con secrets
          cat > .env << 'EOF'
          NODE_ENV=production
          PORT=${{ secrets.PORT }}
          EOF

          docker run -d -p 8000:8000 --name api ${{ env.DOCKER_IMAGE_NAME }}:latest

