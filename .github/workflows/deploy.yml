name: CI/CD Pipeline - Deploy to AWS

# =============================================
# Triggers: Cuándo se ejecuta el pipeline
# =============================================
on:
  pull_request:
    branches: [ develop ]

# =============================================
# Variables globales
# =============================================
env:
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/api-core
  NODE_VERSION: '18'

jobs:
  # =============================================
  # JOB 1: Build & Test
  # =============================================
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🧪 Run tests (si tienes)
      run: npm test --if-present
      
    - name: 🔨 Build TypeScript
      run: npm run build
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔨 Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} .
        docker build -t ${{ env.DOCKER_IMAGE_NAME }}:latest .
        
    - name: 💾 Save Docker image
      run: |
        docker save ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} > api-image.tar
        
    - name: 📤 Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: api-image.tar

  # =============================================
  # JOB 2: Push to Docker Hub
  # =============================================
  push-to-registry:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: 📥 Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        
    - name: 🔄 Load Docker image
      run: docker load < api-image.tar
      
    - name: 🔐 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 📤 Push to Docker Hub
      run: |
        docker push ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.DOCKER_IMAGE_NAME }}:latest

  # =============================================
  # JOB 3: Deploy to EC2
  # =============================================
  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: push-to-registry
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "🔄 Starting deployment..."
          
          # Parar contenedores existentes
          docker-compose down || true
          
          # Limpiar imágenes antiguas
          docker image prune -f
          
          # Pull nueva imagen
          docker pull ${{ env.DOCKER_IMAGE_NAME }}:latest
          
          # Crear directorio del proyecto si no existe
          mkdir -p ~/mi-api-app
          cd ~/mi-api-app
          
          # Crear docker-compose.yml en el servidor
          cat > docker-compose.yml << 'EOF'
          version: '3.8'
          services:
            api:
              image: ${{ env.DOCKER_IMAGE_NAME }}:latest
              ports:
                - "8000:8000"
              environment:
                - NODE_ENV=production
                - MONGODB_URI=mongodb://mongodb:27017/mi_database
                - PORT=8000
              depends_on:
                - mongodb
              restart: unless-stopped
              networks:
                - app-network
            
            mongodb:
              image: mongo:7
              ports:
                - "27017:27017"
              environment:
                - MONGO_INITDB_ROOT_USERNAME=admin
                - MONGO_INITDB_ROOT_PASSWORD=password123
                - MONGO_INITDB_DATABASE=mi_database
              volumes:
                - mongodb_data:/data/db
              restart: unless-stopped
              networks:
                - app-network
          
          volumes:
            mongodb_data:
          networks:
            app-network:
              driver: bridge
          EOF
          
          # Ejecutar contenedores
          docker-compose up -d
          
          echo "✅ Deployment completed!"

  # =============================================
  # JOB 4: Database Migrations
  # =============================================
  migrate-database:
    runs-on: ubuntu-latest
    needs: deploy-to-ec2
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🗃️ Run Database Migrations
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "🗃️ Starting database migrations..."
          
          cd ~/mi-api-app
          
          # Esperar a que MongoDB esté listo
          echo "⏳ Waiting for MongoDB to be ready..."
          sleep 30
          
          # Ejecutar migraciones dentro del contenedor de la API
          docker-compose exec -T api npm run migrate || echo "⚠️ No migration script found"
          
          # O ejecutar migraciones directamente en MongoDB
          docker-compose exec -T mongodb mongosh --eval "
            use mi_database;
            // Crear índices si no existen
            db.users.createIndex({ email: 1 }, { unique: true, background: true });
            db.productos.createIndex({ nombre: 1 }, { background: true });
            print('✅ Migrations completed successfully');
          " || echo "⚠️ Migration failed, but continuing..."
          
          echo "✅ Database migrations completed!"